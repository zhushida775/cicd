一、前期准备环境：
部署docker+git+gitlab+Jenkins+harbor，其中harbor、gitlab和Jenkins可以配置集群或者是分布式；
docker部分：
部署docker注意如何harbor使用的是http方式需要在docker的daemon.json文件中配置私有镜像库配置：
[root@VM000015271 ~]# cat /etc/docker/daemon.json 
{
   "registry-mirrors": ["https://aliyuncs.com"],  
   "insecure-registries": ["http://IP:8089"]
}
注意这个要配置涉及所有docker部署端也要做相同的修改，如果公司内部有自己的harbor或者使用阿里云的默认https的可以忽略配置http的方式；

gitlab部分：
创建好自己的代码仓库，在使用客户端git clone  自己的代码库的时候可以使用https或者是ssh方式，如果是ssh方式可以自己在执行clone之后手工输入gitlab登录的用户名或者密码;也可以在gitlab管理员
或者gitlab程序员自己的用户的客户端使用ssh-keygen方式生成公钥（是Linux系统客户端），在gitlab>ssh keys >将公钥文件的内容添加到新建sshkey中这样做之后可以自动免密码clone；
使用https或者http方式登录方式可以使用创建好的用户密码登录；
在gitlab管理中可以根据代码的需求或者部门按照部门创建用户，用户按照代码框架创建项目组或者分组方式；

harbor部分：
该部分可以创建集群或者单点也是可以的设置每个单点之间相互的同步，配置相关的证书等文件。
同时创建对象项目的镜像库名称。

Jenkins 部分：
配置Jenkins 环境包括mvn环境信息、jdk环境信息、git环境信息；默认如果是使用yum方式部署可以默认；
使用mvn方式构建代码：
   前期部署安装好对应的插件；
   可以配置分布式构建配置k8s中构建、配置在docker中构建、配置在主机中构建的方式；
   使用maven方式构建可以前期在管理配置中设置：SSH remote hosts主机地址信息，这些主机用于maven构建中配置用于可以自动远程执行命令或者脚本；
   创建好凭证用于后期项目使用如git免密码或者agent分布式构建或者文件ssh等方式；
   构建maven项目；
   配置gitlab地址如自己的gitlab地址http://gitlab.12.com:8929/root/ruoyi.git；
   注意分支名称；
   选择对应的触发器，根据自己的环境定义；
   bulid块指定pom.xml和maven构建的命令（这个构建的命令要和开发确认一下）；
   post steps 配置Run only if build succeeds ；
   选择执行shell：
JENKINS_WAR_HOME='/root/.jenkins/workspace/maven-ruoyi/ruoyi-admin/target'
DOCKERFILE_HOME='/root/.jenkins/docker-file/maven-ruoyi'
HARBOR_IP='ip:8089'
REPOSITORIES='ruoyi/ruoyi'
HARBOR_USER='admin'
HARBOR_USER_PASSWD='apbc'
 
# Copy the newest war to docker-file directory.
\cp -f ${JENKINS_WAR_HOME}/ruoyi-admin.jar ${DOCKERFILE_HOME}/ruoyi-admin.jar
 
# Delete image early version.
sudo docker login -u ${HARBOR_USER} -p ${HARBOR_USER_PASSWD} ${HARBOR_IP} 
IMAGE_ID=`sudo docker images | grep ${REPOSITORIES} | awk '{print $3}'`
if [ -n "${IMAGE_ID}" ];then
    sudo docker rmi ${IMAGE_ID}
fi
 
# Build image.
cd ${DOCKERFILE_HOME}
TAG=`date +%Y%m%d-%H%M%S`
sudo docker build -t ${HARBOR_IP}/${REPOSITORIES}:${TAG} . &>/dev/null
 
# Push to the harbor registry.
sudo docker push ${HARBOR_IP}/${REPOSITORIES}:${TAG} &>/dev/null
    以上主要是使用Jenkins拉取代码后将构建的镜像上传到harbor库里；

然后在maven构建的流水线总选择：
“execute shell script on remote host using ssh 
”
以下是发布镜像的脚本：
HARBOR_IP='192.166.84.79:8089'
REPOSITORIES='ruoyi/ruoyi'
HARBOR_USER='admin'
HARBOR_USER_PASSWD='Harbor12345'
 
# 登录harbor
docker login -u ${HARBOR_USER} -p ${HARBOR_USER_PASSWD} ${HARBOR_IP}
 
# Stop container, and delete the container.
CONTAINER_ID=`docker ps | grep "tomcat-ruoyi" | awk '{print $1}'`
if [ -n "$CONTAINER_ID" ]; then
    docker stop $CONTAINER_ID
    docker rm $CONTAINER_ID
else #如果容器启动时失败了，就需要docker ps -a才能找到那个容器
    CONTAINER_ID=`docker ps -a | grep "tomcat-ruoyi" | awk '{print $1}'`
    if [ -n "$CONTAINER_ID" ]; then  # 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的
        docker rm $CONTAINER_ID
    fi
fi
 
# Delet ruoyi  image early version.
IMAGE_ID=`sudo docker images | grep ${REPOSITORIES} | awk '{print $3}'`
if [ -n "${IMAGE_ID}" ];then
    docker rmi ${IMAGE_ID}
fi
 
# Pull image.
# TAG=`curl -s http://${HARBOR_IP}/api/repositories/${REPOSITORIES}/tags | jq '.[-1]' | sed 's/\"//g'` 
# TAG=`curl -s http://172.21.39.43/api/repositories/jenkins/maven-docker/tags | jq '.[-1]| {name:.name}' | awk -F '"' '/name/{print $4}'`
TAG=`curl -u admin:Harbor12345 -s http://192.166.84.79:8089/api/v2.0/projects/ruoyi/repositories/ruoyi/artifacts |awk -F'name":"' '{print $2}'|cut -d '"' -f1`
docker pull ${HARBOR_IP}/${REPOSITORIES}:${TAG} 
#&>/dev/null
 
# Run.
docker run -d --name tomcat-ruoyi -p 8080:8080 ${HARBOR_IP}/${REPOSITORIES}:${TAG}
    
缺点就是批量构建之前需要配置节点主机；
使用k8s配置发布就是  使用命令：
获取image的具体版本号设置配置
使用脚本修改yaml文件
sed -i "s/\[BUILD_NUMBER\]/$BUILD_NUMBER/" ${WORKSPACE}/deploy/DaemonSet.yaml
/opt/k8s/bin/kubectl apply -f ${WORKSPACE}/deploy/Namespace.yaml
kubectl rollout status deployment/nginx-deploy   --查看状态
kubectl rollout pause deployment <deployment>    --暂停升级
kubectl rollout resume deployment <deployment>   --继续升级
kubectl rollout history deployment nginx-deploy  --查看升级历史
kubectl rollout undo deployment nginx-deploy     --回退到当前版本的前一个版本
kubectl rollout undo deployment nginx-deploy --to-revision=2   --回退到指定的版本



或者
kubectl  set   images  
kubectl set image ${DEPLOY_TYPE} -l ${DEPLOY_LABEL} ${CONTAINER_NAME}=${HARBOR_ADDRESS}/${REGISTRY_DIR}/${IMAGE_NAME}:${TAG} -n ${NAMESPACE}

    
 二、关于Jenkins构建方式可以有多种方式，还有可以选择pipeline方式构建：
 
     配置gitlab地址；
     指定Jenkinsfile，通过使用Jenkinsfile进行构建；
    
    
    
    
